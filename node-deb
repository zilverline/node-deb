#!/bin/bash
set -e

die() {
  echo 'Failure:' "$@" >&2
  exit 1
}

# beacuse OSX is shit and can't do `readlink -f`
readlink_() {
  declare src="${BASH_SOURCE[0]}"
  declare dir=

  while [ -h "$src" ]; do
    dir="$(cd -P "$( dirname "$src" )" && pwd)"
    src="$(readlink "$src")"
    [[ $src != /* ]] && src="$dir/$src"
  done
  cd -P "$( dirname "$src" )" && pwd
}

### INITIALIZE ###

declare -r node_deb_dir=$(readlink_ $0)
declare -i log_verbose=0

log_debug() {
  if [ "$log_verbose" -eq 1 ]; then
    echo "$@"
  fi
}

log_info() {
  echo "$@"
}

log_warn() {
  echo 'WARNING!' "$@"
}

# All the variables that are injected into templates
package_name=
package_version=
executable_name=
start_command=$(jq -r '.node_deb.start_command' package.json)
user=
group=
package_description=
package_maintainer=
node_deb_version=$(jq -r '.version' "$node_deb_dir/package.json")
# note: init is also injected

# Other variables
files=
init=
no_delete_temp=0
no_md5sums=0

usage() {
  # Local var because of grep
  declare helpdoc='HELP'
  helpdoc+='DOC'

  echo 'Usage: node-deb [opts] -- file1 file2 ...'
  echo 'Opts:'
  grep "$helpdoc" "$node_deb_dir/node-deb" -B 1 | egrep -v '^--$' | sed -e 's/^  //g' -e "s/# $helpdoc: //g"
}

template_variables() {
  declare -r temp_vars='TEMPLATE_VARS'
  declare -r begin_pattern="### BEGIN $temp_vars ###"
  declare -r end_pattern="### END $temp_vars ###"

  sed -n -e "/$begin_pattern/,/$end_pattern/{/$begin_pattern/d;/$end_pattern/d;p;}" "$node_deb_dir/node-deb" | \
  sed '1d;$d' | \
  sed -e 's:\(.*{{ \)\([a-z_]*\)\( }}.*\):\2:g' | \
  sort
}

cat_template() {
  declare -r template="$1"
  declare -r file
  file=$(find "$node_deb_dir/templates" -name "$template" -type f -maxdepth 1 | head -n 1)

  if [ -z "$file" ]; then
    die "$template is not a valid template"
  else
    cat "$file"
  fi
}

zero_check() {
  if [ -z "$1" ]; then
    die "Cannot pass zero length string to option $2"
  fi
}

while [ -n "$1" ]; do
  param="$1"
  value="$2"

  case $param in
    --cat-template)
      # HELPDOC: Print the contents of a given template then exit
      zero_check "$value" "$param"
      cat_template "$value"
      exit 0
      ;;
    -d | --description)
      # HELPDOC:  The description of the Debian package (default: 'node_deb.description' then 'description' from package.json)
      zero_check "$value" "$param"
      package_description="$value"
      shift
      ;;
    -e | --executable-name)
      # HELPDOC: The name of the executable (default: 'node_deb.executable_name' from package.json then $package-name)
      zero_check "$value" "$param"
      executable_name="$value"
      shift
      ;;
    -g | --group)
      # HELPDOC:  The Unix group the process will run as (default: 'node_deb.group' from package.json then $user)
      zero_check "$value" "$param"
      group="$value"
      shift
      ;;
    -h | --help)
      # HELPDOC: Display this message and exit
      usage
      exit 0
      ;;
    -i | --init)
      # HELPDOC: Init script type {auto, upstart, systemd, none}. 'auto' chooses upstart or systemd. 'none' makes no init script. (default: 'node_deb.init' from package.json then 'auto')
      zero_check "$value" "$param"
      init="$value"
      shift
      ;;
    --list-json-overrides)
      # HELPDOC: List all fields of the 'node_deb' object in 'package.json' that can be used as an override then exit
      # TODO this is likely to break
      grep 'jq ' "$node_deb_dir/node-deb" | grep '\.node_deb\.' | cut -d "'" -f 2 | sort | uniq
      exit 0
      ;;
    --list-templates)
      # HELPDOC: Print a list of available templates then exit
      find "$node_deb_dir/templates" -type f -maxdepth 1 | awk -F '/' '{ print $NF }' | sort
      exit 0
      ;;
    --list-template-variables)
      # HELPDOC: Print a list of variales available to templates then exit
      template_variables
      exit 0
      ;;
    -m | --maintainer)
      # HELPDOC: The maintainer of the Debian package (default: 'node_deb.maintainer' then 'author' from package.json)
      zero_check "$value" "$param"
      package_maintainer="$value"
      shift
      ;;
    -n | --package-name)
      # HELPDOC: The name of the Debian package (default: 'node_deb.package_name' then 'name' from package.json)
      zero_check "$value" "$param"
      package_name="$value"
      shift
      ;;
    --no-delete-temp)
      # HELPDOC: Do not delete temp directory used to build Debian package
      no_delete_temp=1
      ;;
    --no-md5sums)
      # HELPDOC: Do not calculate md5sums for DEBIAN directory
      no_md5sums=1
      ;;
    --template-control)
      # HELPDOC: Override Debian control template (default: 'node_deb.templates.control' from package.json then built-in)
      zero_check "$value" "$param"
      template_control="$param"
      shift
      ;;
    --template-executable)
      # HELPDOC: Override executable template (default: 'node_deb.templates.executable' from package.json then built-in)
      zero_check "$value" "$param"
      template_executable="$param"
      shift
      ;;
    --template-postinst)
      # HELPDOC: Override maintainer script postinst template (default: 'node_deb.templates.postinst' from package.json then built-in)
      zero_check "$value" "$param"
      template_postinst="$param"
      shift
      ;;
    --template-postrm)
      # HELPDOC: Override maintainer script postrm template (default: 'node_deb.templates.postrm' from package.json then built-in)
      zero_check "$value" "$param"
      template_postrm="$param"
      shift
      ;;
    --template-prerm)
      # HELPDOC: Override maintainer script prerm template (default: 'node_deb.templates.prem' from package.json then built-in)
      zero_check "$value" "$param"
      template_prerm="$param"
      shift
      ;;
    --template-systemd-service)
      # HELPDOC: Override systemd unit template (default: 'node_deb.templates.systemd_service' from package.json then built-in)
      zero_check "$value" "$param"
      template_systemd="$param"
      shift
      ;;
    --template-upstart-conf)
      # HELPDOC: Override upstart conf template (default: 'node_deb.templates.upstart_conf' from package.json then built-in)
      zero_check "$value" "$param"
      template_upstart="$param"
      shift
      ;;
    --node-version)
      # HELPDOC: The node version the package should depend on
      zero_check "$value" "$param"
      node_version="$value"
      shift
      ;;
    -u | --user)
      # HELPDOC: The Unix user the process will run as (default: 'node_deb.user' from package.json then $package-name)
      zero_check "$value" "$param"
      user="$value"
      shift
      ;;
    --verbose)
      # HELPDOC: Print addtional information while packaging
      log_verbose=1
      ;;
    -v | --version)
      # HELPDOC: The version of the Debian package (default: 'node_deb.version' then 'version' from package.json)
      zero_check "$value" "$param"
      package_version="$value"
      shift
      ;;
    --)
      # HELPDOC: Delimiter separating options from files and directories
      shift
      break
      ;;
    *)
      echo "Invalid option: $param" >&2
      usage >&2
      exit 1
  esac
  shift
done

### VALIDATION ###

if [ -z "$1" ]; then
  die 'You must pick at least one file or directory to add to the Debian package'
fi

for file in "$@"; do
  if ! [ -e "$file" ]; then
    die "File does not exist: '$file'. Aborting"
  fi
done

# Set the package name
if [ -z "$package_name" ]; then
  package_name=$(jq -r '.node_deb.package_name' package.json)
  if [[ "$package_name" == 'null' ]]; then
    package_name=$(jq -r '.name' package.json)
    if [ "$package_name" == 'null' ]; then
      die 'If no override is provided, your package.json must have element "node_deb.package_name" or "name"'
    fi
  fi
fi
log_debug "The package name has been set to: $package_name"

# Set the package version
if [ -z "$package_version" ]; then
  package_version=$(jq -r '.node_deb.version' package.json)
  if [[ "$package_version" == 'null' ]]; then
    package_version=$(jq -r '.version' package.json)
    if [ "$package_version" == 'null' ]; then
      die 'If no override is provided, your package.json must have element "node_deb.package_version" "version"'
    fi
  fi
fi
log_debug "The package version has been set to: $package_version"

# Set the package architecture
if [ -z "$architecture" ]; then
  architecture=$(jq -r '.node_deb.architecture' package.json)
  if [[ "$architecture" == 'null' ]]; then
    architecture=$(dpkg --print-architecture)
  fi
fi
log_debug "The package architecture has been set to: $architecture"

# Set the nodejs dependency version
if [ -z "$node_version" ]; then
  if [ -f .nvmrc ]; then
    node_version=$(cat .nvmrc)
  fi

  if [[ "x$node_version" == 'x' ]]; then
    node_version=$(jq -r '.node_deb.node_version' package.json)
  fi

  if [[ "$node_version" == 'null' ]]; then
    node_version=""
  fi
fi

# Format version to Debian Control File format
if [[ "x$node_version" != 'x' ]]; then
  node_version="(= $node_version)"
fi

log_debug "The nodejs version has been set to: $node_version"

# Set the package description
if [ -z "$package_description" ]; then
  package_description=$(jq -r '.node_deb.description' package.json)
  if [[ "$package_description" == 'null' ]]; then
    package_description=$(jq -r '.description' package.json)
    if [[ "$package_description" == null ]]; then
      die 'If no override is provided, your package.json must have element "node_deb.package_description" or "description"'
    fi
  fi
fi
log_debug "The package description has been set and starts with: $(echo $package_description | head -1 | cut -c-40)"

# Set the packge maintainer
if [ -z "$package_maintainer" ]; then
  package_maintainer=$(jq -r '.node_deb.maintainer' package.json)
  if [[ "$package_maintainer" == 'null' ]]; then
    package_maintainer=$(jq -r '.author' package.json)
  fi
fi
log_debug "The package maintainer has been set to: $package_maintainer"

# Set executable name
if [ -z "$executable_name" ]; then
  executable_name=$(jq -r '.node_deb.executable_name' package.json)
  if [[ "$executable_name" == 'null' ]]; then
    executable_name="$package_name"
  fi
fi
log_debug "The executable name has been set to: $executable_name"

# Set start command
if [ "$start_command" == 'null' ]; then
  start_command=$(jq -r '.scripts.start' package.json)
  if [ "$start_command" == 'null' ]; then
    die 'Your package.json must have element "node_deb.start_command" or "scripts.start"'
  fi
fi
log_debug "The start command has been set to: $start_command"

# Set unix user
if [ -z "$user" ]; then
  user=$(jq -r '.node_deb.user' package.json)
  if [[ "$user" == 'null' ]]; then
    user="$package_name"
  fi
fi
log_debug "The Unix user has been set to: $user"

# Set unix group
if [ -z "$group" ]; then
  group=$(jq -r '.node_deb.group' package.json)
  if [[ "$group" == 'null' ]]; then
    group="$user"
  fi
fi
log_debug "The Unix group has been set to: $group"

# Set init type
if [ -z "$init" ]; then
  init=$(jq -r '.node_deb.init' package.json)
  if [[ "$init" == 'null' ]]; then
    init='auto'
  fi
fi
case $init in
  auto|upstart|systemd|none)
    ;;
  *)
    die "Invalid init type: $init. Must be 'auto', 'upstart', 'systemd', or 'none'"
esac
log_debug "The init type has been set to: $init"

# Set control template
if [ -z "$template_control" ]; then
  temp_template_control=$(jq -r '.node_deb.templates.control' package.json)
  if [[ "$temp_template_control" == 'null' ]]; then
    template_control=''
  fi
fi
: ${template_control:="$node_deb_dir/templates/control"}
log_debug "The control template has been set to: $template_control"

# Set executable template
if [ -z "$template_executable" ]; then
  template_executable=$(jq -r '.node_deb.templates.executable' package.json)
  if [[ "$template_executable" == 'null' ]]; then
    template_executable=''
  fi
fi
: ${template_executable:="$node_deb_dir/templates/executable"}
log_debug "The executable template has been set to: $template_executable"

# Set postinst template
if [ -z "$template_postinst" ]; then
  template_postinst=$(jq -r '.node_deb.templates.postinst' package.json)
  if [[ "$template_postinst" == 'null' ]]; then
    template_postinst=''
  fi
fi
: ${template_postinst:="$node_deb_dir/templates/postinst"}
log_debug "The postinst template has been set to: $template_postinst"

# Set postrm template
if [ -z "$template_postrm" ]; then
  template_postrm=$(jq -r '.node_deb.templates.postrm' package.json)
  if [[ "$template_postrm" == 'null' ]]; then
    template_postrm=''
  fi
fi
: ${template_postrm:="$node_deb_dir/templates/postrm"}
log_debug "The postrm template has been set to: $template_postrm"

# Set prerm template
if [ -z "$template_prerm" ]; then
  template_prerm=$(jq -r '.node_deb.templates.prerm' package.json)
  if [[ "$template_prerm" == 'null' ]]; then
    template_prerm=''
  fi
fi
: ${template_prerm:="$node_deb_dir/templates/prerm"}
log_debug "The prerm template has been set to: $template_prerm"

# Set systemd unit template
if [ -z "$template_systemd" ]; then
  template_systemd=$(jq -r '.node_deb.templates.systemd_service' package.json)
  if [[ "$template_systemd" == 'null' ]]; then
    template_systemd=''
  fi
fi
: ${template_systemd:="$node_deb_dir/templates/systemd.service"}
log_debug "The systemd template has been set to: $template_systemd"

# Set upstart conf template
if [ -z "$template_upstart" ]; then
  template_upstart=$(jq -r '.node_deb.templates.upstart_conf' package.json)
  if [[ "$template_upstart" == 'null' ]]; then
    template_upstart=''
  fi
fi
: ${template_upstart:="$node_deb_dir/templates/upstart.conf"}
log_debug "The upstart template has been set to: $template_prerm"

deb_dir="${package_name}_${package_version}_${architecture}"

finish() {
  if [ $no_delete_temp -ne 1 ]; then
    rm -rf "$deb_dir"
  fi
}

trap 'finish' EXIT

### BUILD ###

if [ -e "$deb_dir" ]; then rm -rf "$deb_dir"; fi

log_info 'Making install directories'
mkdir -p "$deb_dir/DEBIAN" \
         "$deb_dir/etc/$package_name" \
         "$deb_dir/usr/share/$package_name/app" \
         "$deb_dir/usr/share/$package_name/bin" \
         "$deb_dir/usr/bin"

if [[ "$init" == 'auto' ]] || [[ "$init" == 'upstart' ]]; then
  mkdir -p "$deb_dir/etc/init"
fi

if [[ "$init" == 'auto' ]] || [[ "$init" == 'systemd' ]]; then
  mkdir -p "$deb_dir/etc/systemd/system"
fi

escape() {
  sed -e 's/[]\/$*.^|[]/\\&/g' -e 's/&/\\&/g' <<< "$@"
}

replace_vars() {
  declare -r file="$1"
  declare -r target_file="$2"

  ### BEGIN TEMPLATE_VARS ###
  sed < "$file" \
    -e "s/{{ node_deb_package_name }}/$(escape $package_name)/g" \
    -e "s/{{ node_deb_app_command }}/$(escape $app_command)/g" \
    -e "s/{{ node_deb_executable_name }}/$(escape $executable_name)/g" \
    -e "s/{{ node_deb_architecture }}/$(escape $architecture)/g" \
    -e "s/{{ node_deb_package_version }}/$(escape $package_version)/g" \
    -e "s/{{ node_deb_start_command }}/$(escape $start_command)/g" \
    -e "s/{{ node_deb_package_description }}/$(escape $package_description)/g" \
    -e "s/{{ node_deb_package_maintainer }}/$(escape $package_maintainer)/g" \
    -e "s/{{ node_deb_user }}/$(escape $user)/g" \
    -e "s/{{ node_deb_group }}/$(escape $group)/g" \
    -e "s/{{ node_deb_init }}/$(escape $init)/g" \
    -e "s/{{ node_deb_version }}/$(escape $node_deb_version)/g" \
    -e "s/{{ node_version }}/$(escape $node_version)/g" \
  > "$target_file"
  ### END TEMPLATE_VARS ###
}

log_info 'Rendering templates'
replace_vars "$template_control" "$deb_dir/DEBIAN/control"
replace_vars "$template_postinst" "$deb_dir/DEBIAN/postinst"
replace_vars "$template_postrm" "$deb_dir/DEBIAN/postrm"
replace_vars "$template_prerm" "$deb_dir/DEBIAN/prerm"
replace_vars "$template_executable" "$deb_dir/usr/share/$package_name/bin/$executable_name"

if [ "$init" == 'auto' ] || [ "$init" == 'upstart' ]; then
  replace_vars "$template_upstart" "$deb_dir/etc/init/$package_name.conf"
fi

if [ "$init" == 'auto' ] || [ "$init" == 'systemd' ]; then
  replace_vars "$template_systemd" "$deb_dir/etc/systemd/system/$package_name.service"
fi

log_debug 'Templates rendered successfully'

ln -sf "/usr/share/$package_name/bin/$executable_name" "$deb_dir/usr/bin/$executable_name"

chmod -R 0755 "$deb_dir/DEBIAN/" \
              "$deb_dir/usr/share/$package_name/bin/$executable_name"

# Copy all files into temporary Debian dir
log_info 'Recursively copying files into Debian directory'

find "$@" -maxdepth 0 -print0 | {
  while IFS= read -r -d '' file; do
    log_debug "Copying: $file"
    rsync -rRq "$file" "$deb_dir/usr/share/$package_name/app/"
  done
}

# Calculate md5sums
if [ "$no_md5sums" -eq 0 ]; then
  log_debug 'Calculating md5 sums'
  # Debian/Ubuntu
  if hash md5sum 2>/dev/null; then
    find "$deb_dir" -path "$deb_dir/DEBIAN" -prune -o -type f -print0 | xargs -0 md5sum >> "$deb_dir/DEBIAN/md5sums"
  # OSX
  elif hash md5 2>/dev/null; then
    find "$deb_dir" -path "$deb_dir/DEBIAN" -prune -o -type f -print0 | {
      while IFS= read -r -d '' file; do
        echo "$(md5 -q "$file") $file" >> "$deb_dir/DEBIAN/md5sums"
      done
    }
  # OSX with `brew install gmd5sum`
  elif hash gmd5sum 2>/dev/null; then
    find "$deb_dir" -path "$deb_dir/DEBIAN" -prune -o -type f -print0 | xargs -0 gmd5sum >> "$deb_dir/DEBIAN/md5sums"
  # Oh dear...
  else
    die 'Unable to find suitable md5 sum program'
  fi
fi

log_info 'Building Debian package'
dpkg-deb --build "$deb_dir" > '/dev/null'
log_info 'Success.'
